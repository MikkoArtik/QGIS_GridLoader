# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GrdLoader
                                 A QGIS plugin
 Loader grid from Surfer to QGIS with saving color scale
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by MikkoArtik
        email                : mikkoartic@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .grd_loader_dialog import GrdLoaderDialog
import os.path

from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QFileInfo

from qgis.core import QgsRasterBandStats
from qgis.core import QgsColorRampShader
from qgis.core import QgsRasterShader
from qgis.core import QgsSingleBandPseudoColorRenderer
from qgis.core import QgsRasterLayer
from qgis.core import QgsProject

from .parsers import readClrFile
from .parsers import recalcScale


class GrdLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GrdLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = GrdLoaderDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GrdLoader')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GrdLoader')
        self.toolbar.setObjectName(u'GrdLoader')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GrdLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/grd_loader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Grid Loader'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GrdLoader'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # get current cooordinate projection of qgis project
        currentSrc = self.iface.mapCanvas().mapSettings().destinationCrs()
        # setup currnt SRC
        self.dlg.mQgsProjectionSelectionWidget.setCrs(currentSrc)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # get clr-file path
            clr_file_path = self.dlg.mClrFilePath.filePath()
            # get grd-file path
            grd_file_path = self.dlg.mGrdFilePath.filePath()
            if not os.path.isfile(clr_file_path):
                self.messageWindow(message_type='error',
                                   text_value='CLR file is not found')
                exit()
            if not os.path.isfile(grd_file_path):
                self.messageWindow(message_type='error',
                                   text_value='GRD file is not found')
                exit()
            # get crs for grid layer
            raster_crs = self.dlg.mQgsProjectionSelectionWidget.crs()
            self.AddRasterLayer(file_path=grd_file_path, crs =raster_crs,
                                clr_file_path = clr_file_path)


    def messageWindow(self, message_type, text_value):
       """
       Function for displaying window with message
       """
       msg = QMessageBox()
       if message_type == 'info':
           msg.setIcon(QMessageBox.Information)
           msg.setWindowTitle("Information")
       elif message_type == 'error':
           msg.setIcon(QMessageBox.Critical)
           msg.setWindowTitle("Error")
       else:
           msg.setIcon(QMessageBox.Warning)
           msg.setWindowTitle("Warning")
       msg.setText(text_value)
       msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
       msg.exec_()


    def AddRasterLayer(self, file_path, crs, clr_file_path):
        """
        Function fot adding grid Layer
        """
        fileInfo = QFileInfo(file_path)
        path = fileInfo.filePath()
        baseName = fileInfo.baseName()
        # turn off dialog with selection coordinate system
        self.iface.mainWindow().blockSignals(True)
        layer = QgsRasterLayer(path, baseName)
        # setup coordinate system for layer
        layer.setCrs(crs)
        # get min and max value from grid layer
        min, max = self.GetRasterStatistics(layer)
        # reading clr-file data
        clr_data = readClrFile(file_path=clr_file_path)
        # calculate new scale for grid in QGIS
        new_scale_data = recalcScale(clr_data=clr_data, min_value=min,
                                     max_value=max)
        # creating color ramp for grid
        ramp_shader = QgsColorRampShader()
        ramp_shader.setColorRampType(QgsColorRampShader.Interpolated)
        levels = list()
        for z_value, hex_color, label in new_scale_data:
            level_data = QgsColorRampShader.ColorRampItem(z_value, QColor(hex_color), label)
            levels.append(level_data)
        ramp_shader.setColorRampItemList(levels)

        raster_shader = QgsRasterShader()
        raster_shader.setRasterShaderFunction(ramp_shader)

        raster_renderer = QgsSingleBandPseudoColorRenderer(layer.dataProvider(), 1, raster_shader)
        layer.setRenderer(raster_renderer)

        QgsProject.instance().addMapLayer(layer)
        self.iface.mainWindow().blockSignals(False)


    def GetRasterStatistics(self,layer):
        """
        Function for getting grid statistics (min and max value)
        """
        extent = layer.extent()
        provider = layer.dataProvider()
        stats = provider.bandStatistics(1, QgsRasterBandStats.All, extent, 0)
        min = stats.minimumValue
        max = stats.maximumValue
        return min, max
